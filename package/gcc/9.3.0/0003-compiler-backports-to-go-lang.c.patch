From 3ac9e9a79a2c95bc78c03eb0d0b16f535bb7ad26 Mon Sep 17 00:00:00 2001
From: Mirza Krak <mirza@maneoz.tech>
Date: Thu, 12 Nov 2020 12:39:40 +0000
Subject: [PATCH 3/3] compiler: backports to go-lang.c

Signed-off-by: Mirza Krak <mirza@maneoz.tech>
---
 gcc/go/go-lang.c | 24 ++++++++++++------------
 1 file changed, 12 insertions(+), 12 deletions(-)

diff --git a/gcc/go/go-lang.c b/gcc/go/go-lang.c
index 387694e4f56d610aeda03e52059fc3aab83402df..7650be42bf7799269dfb6269fd811294b5dd991c 100644
--- a/gcc/go/go-lang.c
+++ b/gcc/go/go-lang.c
@@ -293,17 +293,17 @@ go_langhook_post_options (const char **pfilename ATTRIBUTE_UNUSED)
     go_add_search_path (dir);
   go_search_dirs.release ();
 
-  if (flag_excess_precision == EXCESS_PRECISION_DEFAULT)
-    flag_excess_precision = EXCESS_PRECISION_STANDARD;
+  if (flag_excess_precision_cmdline == EXCESS_PRECISION_DEFAULT)
+    flag_excess_precision_cmdline = EXCESS_PRECISION_STANDARD;
 
   /* Tail call optimizations can confuse uses of runtime.Callers.  */
-  SET_OPTION_IF_UNSET (&global_options, &global_options_set,
-		       flag_optimize_sibling_calls, 0);
+  if (!global_options_set.x_flag_optimize_sibling_calls)
+    global_options.x_flag_optimize_sibling_calls = 0;
 
   /* Partial inlining can confuses uses of runtime.Callers.
      See https://gcc.gnu.org/PR91663.  */
-  SET_OPTION_IF_UNSET (&global_options, &global_options_set,
-		       flag_partial_inlining, 0);
+  if (!global_options_set.x_flag_partial_inlining)
+    global_options.x_flag_partial_inlining = 0;
 
   /* If the debug info level is still 1, as set in init_options, make
      sure that some debugging type is selected.  */
@@ -312,18 +312,18 @@ go_langhook_post_options (const char **pfilename ATTRIBUTE_UNUSED)
     global_options.x_write_symbols = PREFERRED_DEBUGGING_TYPE;
 
   /* We turn on stack splitting if we can.  */
-  if (targetm_common.supports_split_stack (false, &global_options))
-    SET_OPTION_IF_UNSET (&global_options, &global_options_set,
-			 flag_split_stack, 1);
+  if (!global_options_set.x_flag_split_stack
+      && targetm_common.supports_split_stack (false, &global_options))
+    global_options.x_flag_split_stack = 1;
 
   /* If stack splitting is turned on, and the user did not explicitly
      request function partitioning, turn off partitioning, as it
      confuses the linker when trying to handle partitioned split-stack
      code that calls a non-split-stack function.  */
   if (global_options.x_flag_split_stack
-      && global_options.x_flag_reorder_blocks_and_partition)
-    SET_OPTION_IF_UNSET (&global_options, &global_options_set,
-			 flag_reorder_blocks_and_partition, 0);
+      && global_options.x_flag_reorder_blocks_and_partition
+      && !global_options_set.x_flag_reorder_blocks_and_partition)
+    global_options.x_flag_reorder_blocks_and_partition = 0;
 
   /* Returning false means that the backend should be used.  */
   return false;
-- 
2.20.1

